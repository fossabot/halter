from pathlib import Path

from core.models.interface import NetworkInterface, VlanMode
from core.models.network import Network


def generate_debian_interfaces(
    interfaces: list[NetworkInterface], networks: list[Network]
) -> str:
    lines = [
        "# /etc/network/interfaces - generated by Halter\n",
        "source /etc/network/interfaces.d/*",
        "# The loopback network interface",
        "auto lo",
        "iface lo inet loopback",
        "",
    ]

    network_map = {net.name: net for net in networks}

    for iface in interfaces:
        net = network_map.get(iface.network_id)
        if not net:
            raise ValueError(
                f"No matching network found for interface '{iface.name}'"
            )

        lines.append(f"auto {iface.name}")
        lines.append(f"iface {iface.name} inet static")
        lines.append(f"    address {iface.address}")

        if iface.vlan_mode != VlanMode.ACCESS and net.vlan:
            lines.append(f"    vlan-raw-device {iface.name}")
            lines.append(f"    vlan-id {net.vlan.id}")

        for route in iface.routes:
            lines.append(f"    up ip route add {route}")

        lines.append("")

    return "\n".join(lines)


def generate_windows_interface_config(
    interfaces: list[NetworkInterface], networks: list[Network]
) -> str:
    lines = [
        ":: Network interface configuration script - generated by Halter\n"
    ]

    network_map = {net.name: net for net in networks}

    for iface in interfaces:
        net = network_map.get(iface.network_id)
        if not net:
            raise ValueError(
                f"No matching network found for interface '{iface.name}'"
            )

        lines.append(
            f'netsh interface ip set address name="{iface.name}" static {iface.address}'
        )

        for route in iface.routes:
            lines.append(f"route add {route} IF {iface.name}")

        lines.append("")

    return "\n".join(lines)


def export_configs_to_files(
    interfaces: list[NetworkInterface],
    networks: list[Network],
    output_dir: Path,
) -> None:
    output_dir.mkdir(parents=True, exist_ok=True)

    debian_config = generate_debian_interfaces(interfaces, networks)
    with (output_dir / "interfaces").open("w", encoding="utf-8") as f:
        f.write(debian_config)

    windows_config = generate_windows_interface_config(interfaces, networks)
    with (output_dir / "windows_network_config.bat").open(
        "w", encoding="utf-8"
    ) as f:
        f.write(windows_config)
